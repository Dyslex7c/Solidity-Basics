{"id":"37151ff5e61774888b84d83e77c0add5","_format":"hh-sol-build-info-1","solcVersion":"0.8.24","solcLongVersion":"0.8.24+commit.e11b9ed9","input":{"language":"Solidity","sources":{"contracts/SimpleStorage.sol":{"content":"//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24; // solidity version\r\n\r\ncontract SimpleStorage {\r\n    uint256 favoriteNumber;\r\n    \r\n    struct People {\r\n        uint256 favoriteNumber;\r\n        string name;\r\n    }\r\n    // uint256[] public anArray;\r\n    People[] public people;\r\n\r\n    mapping(string => uint256) public nameToFavoriteNumber;\r\n\r\n    function store(uint256 _favoriteNumber) public {\r\n        favoriteNumber = _favoriteNumber;\r\n    }\r\n\r\n    function retrieve() public view returns (uint256) {\r\n        return favoriteNumber;\r\n    }\r\n\r\n    function addPerson(string memory _name, uint256 _favoriteNumber) public {\r\n        people.push(People(_favoriteNumber, _name));\r\n        nameToFavoriteNumber[_name] = _favoriteNumber;\r\n    }\r\n} "}},"settings":{"evmVersion":"paris","optimizer":{"enabled":true,"mode":"3"},"outputSelection":{"*":{"*":["abi","evm.methodIdentifiers","metadata"],"":["ast"]}},"libraries":{}}},"output":{"errors":[],"version":"0.8.24","long_version":"0.8.24+commit.e11b9ed9.Linux.g++","zk_version":"1.4.1","sources":{"contracts/SimpleStorage.sol":{"id":0,"ast":{"absolutePath":"contracts/SimpleStorage.sol","exportedSymbols":{"SimpleStorage":[58]},"id":59,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","0.8",".24"],"nodeType":"PragmaDirective","src":"32:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"SimpleStorage","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":58,"linearizedBaseContracts":[58],"name":"SimpleStorage","nameLocation":"88:13:0","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":3,"mutability":"mutable","name":"favoriteNumber","nameLocation":"117:14:0","nodeType":"VariableDeclaration","scope":58,"src":"109:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2,"name":"uint256","nodeType":"ElementaryTypeName","src":"109:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"canonicalName":"SimpleStorage.People","id":8,"members":[{"constant":false,"id":5,"mutability":"mutable","name":"favoriteNumber","nameLocation":"177:14:0","nodeType":"VariableDeclaration","scope":8,"src":"169:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4,"name":"uint256","nodeType":"ElementaryTypeName","src":"169:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":7,"mutability":"mutable","name":"name","nameLocation":"209:4:0","nodeType":"VariableDeclaration","scope":8,"src":"202:11:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":6,"name":"string","nodeType":"ElementaryTypeName","src":"202:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"People","nameLocation":"151:6:0","nodeType":"StructDefinition","scope":58,"src":"144:77:0","visibility":"public"},{"constant":false,"functionSelector":"9e7a13ad","id":12,"mutability":"mutable","name":"people","nameLocation":"277:6:0","nodeType":"VariableDeclaration","scope":58,"src":"261:22:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_People_$8_storage_$dyn_storage","typeString":"struct SimpleStorage.People[]"},"typeName":{"baseType":{"id":10,"nodeType":"UserDefinedTypeName","pathNode":{"id":9,"name":"People","nameLocations":["261:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":8,"src":"261:6:0"},"referencedDeclaration":8,"src":"261:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_People_$8_storage_ptr","typeString":"struct SimpleStorage.People"}},"id":11,"nodeType":"ArrayTypeName","src":"261:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_People_$8_storage_$dyn_storage_ptr","typeString":"struct SimpleStorage.People[]"}},"visibility":"public"},{"constant":false,"functionSelector":"8bab8dd5","id":16,"mutability":"mutable","name":"nameToFavoriteNumber","nameLocation":"326:20:0","nodeType":"VariableDeclaration","scope":58,"src":"292:54:0","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"typeName":{"id":15,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":13,"name":"string","nodeType":"ElementaryTypeName","src":"300:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"nodeType":"Mapping","src":"292:26:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":14,"name":"uint256","nodeType":"ElementaryTypeName","src":"310:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"public"},{"body":{"id":25,"nodeType":"Block","src":"402:51:0","statements":[{"expression":{"id":23,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":21,"name":"favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"413:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":22,"name":"_favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":18,"src":"430:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"413:32:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":24,"nodeType":"ExpressionStatement","src":"413:32:0"}]},"functionSelector":"6057361d","id":26,"implemented":true,"kind":"function","modifiers":[],"name":"store","nameLocation":"364:5:0","nodeType":"FunctionDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":18,"mutability":"mutable","name":"_favoriteNumber","nameLocation":"378:15:0","nodeType":"VariableDeclaration","scope":26,"src":"370:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":17,"name":"uint256","nodeType":"ElementaryTypeName","src":"370:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"369:25:0"},"returnParameters":{"id":20,"nodeType":"ParameterList","parameters":[],"src":"402:0:0"},"scope":58,"src":"355:98:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":33,"nodeType":"Block","src":"511:40:0","statements":[{"expression":{"id":31,"name":"favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3,"src":"529:14:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":30,"id":32,"nodeType":"Return","src":"522:21:0"}]},"functionSelector":"2e64cec1","id":34,"implemented":true,"kind":"function","modifiers":[],"name":"retrieve","nameLocation":"470:8:0","nodeType":"FunctionDefinition","parameters":{"id":27,"nodeType":"ParameterList","parameters":[],"src":"478:2:0"},"returnParameters":{"id":30,"nodeType":"ParameterList","parameters":[{"constant":false,"id":29,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":34,"src":"502:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":28,"name":"uint256","nodeType":"ElementaryTypeName","src":"502:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"501:9:0"},"scope":58,"src":"461:90:0","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":56,"nodeType":"Block","src":"631:118:0","statements":[{"expression":{"arguments":[{"arguments":[{"id":45,"name":"_favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"661:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":46,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"678:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":44,"name":"People","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":8,"src":"654:6:0","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_People_$8_storage_ptr_$","typeString":"type(struct SimpleStorage.People storage pointer)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"654:30:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_People_$8_memory_ptr","typeString":"struct SimpleStorage.People memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_People_$8_memory_ptr","typeString":"struct SimpleStorage.People memory"}],"expression":{"id":41,"name":"people","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":12,"src":"642:6:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_People_$8_storage_$dyn_storage","typeString":"struct SimpleStorage.People storage ref[] storage ref"}},"id":43,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"649:4:0","memberName":"push","nodeType":"MemberAccess","src":"642:11:0","typeDescriptions":{"typeIdentifier":"t_function_arraypush_nonpayable$_t_array$_t_struct$_People_$8_storage_$dyn_storage_ptr_$_t_struct$_People_$8_storage_$returns$__$attached_to$_t_array$_t_struct$_People_$8_storage_$dyn_storage_ptr_$","typeString":"function (struct SimpleStorage.People storage ref[] storage pointer,struct SimpleStorage.People storage ref)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"642:43:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49,"nodeType":"ExpressionStatement","src":"642:43:0"},{"expression":{"id":54,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":50,"name":"nameToFavoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":16,"src":"696:20:0","typeDescriptions":{"typeIdentifier":"t_mapping$_t_string_memory_ptr_$_t_uint256_$","typeString":"mapping(string memory => uint256)"}},"id":52,"indexExpression":{"id":51,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":36,"src":"717:5:0","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"696:27:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":53,"name":"_favoriteNumber","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":38,"src":"726:15:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"696:45:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":55,"nodeType":"ExpressionStatement","src":"696:45:0"}]},"functionSelector":"6f760f41","id":57,"implemented":true,"kind":"function","modifiers":[],"name":"addPerson","nameLocation":"568:9:0","nodeType":"FunctionDefinition","parameters":{"id":39,"nodeType":"ParameterList","parameters":[{"constant":false,"id":36,"mutability":"mutable","name":"_name","nameLocation":"592:5:0","nodeType":"VariableDeclaration","scope":57,"src":"578:19:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":35,"name":"string","nodeType":"ElementaryTypeName","src":"578:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":38,"mutability":"mutable","name":"_favoriteNumber","nameLocation":"607:15:0","nodeType":"VariableDeclaration","scope":57,"src":"599:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":37,"name":"uint256","nodeType":"ElementaryTypeName","src":"599:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"577:46:0"},"returnParameters":{"id":40,"nodeType":"ParameterList","parameters":[],"src":"631:0:0"},"scope":58,"src":"559:190:0","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":59,"src":"79:673:0","usedErrors":[],"usedEvents":[]}],"src":"32:721:0"}}},"contracts":{"contracts/SimpleStorage.sol":{"SimpleStorage":{"abi":[{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"uint256","name":"_favoriteNumber","type":"uint256"}],"name":"addPerson","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"string","name":"","type":"string"}],"name":"nameToFavoriteNumber","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"people","outputs":[{"internalType":"uint256","name":"favoriteNumber","type":"uint256"},{"internalType":"string","name":"name","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"retrieve","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_favoriteNumber","type":"uint256"}],"name":"store","outputs":[],"stateMutability":"nonpayable","type":"function"}],"metadata":{"optimizer_settings":{"is_debug_logging_enabled":false,"is_fallback_to_size_enabled":false,"is_system_request_memoization_disabled":false,"is_verify_each_enabled":false,"jump_table_density_threshold":null,"level_back_end":"Aggressive","level_middle_end":"Aggressive","level_middle_end_size":"Zero"},"solc_metadata":"{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_favoriteNumber\",\"type\":\"uint256\"}],\"name\":\"addPerson\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"nameToFavoriteNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"people\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"favoriteNumber\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"retrieve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_favoriteNumber\",\"type\":\"uint256\"}],\"name\":\"store\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleStorage.sol\":\"SimpleStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"details\":{\"constantOptimizer\":false,\"cse\":false,\"deduplicate\":false,\"inliner\":false,\"jumpdestRemover\":false,\"orderLiterals\":false,\"peephole\":false,\"simpleCounterForLoopUncheckedIncrement\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf[xa[r]EscLMcCTUtTOntnfDIulLculVcul [j]Tpeulxa[rul]xa[r]cLgvifCTUca[r]LSsTFOtfDnca[r]Iulc]jmul[jul] VcTOcul jmul:fDnTOcmu\",\"stackAllocation\":true}},\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SimpleStorage.sol\":{\"keccak256\":\"0xd794500f08a5ab82c62ca97b398ad8aa78f1801b00abef658c1ff9891999b950\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ff4223cd6fc0541a55a143d3a1adae3c41a33895c723157db2b042bdde6537d9\",\"dweb:/ipfs/QmZDYnPkhn45iwSdu7GRP6NZeccmk464BFg6xwrYKvZFDq\"]}},\"version\":1}","solc_version":"0.8.24","solc_zkvm_edition":null,"zk_version":"1.4.1"},"evm":{"legacyAssembly":null,"assembly":"\t.text\n\t.file\t\"SimpleStorage.sol:SimpleStorage\"\n\t.globl\t__entry\n__entry:\n.func_begin0:\n\tnop\tstack+=[8]\n\tadd\tr2, r0, r3\n\tptr.add\tr1, r0, stack[@ptr_calldata]\n\tadd\t128, r0, r4\n\tst.1\t64, r4\n\tadd\tr1, r0, r2\n\tshr.s\t96, r2, r2\n\tand\t@CPI0_0[0], r2, r2\n\tand!\t1, r3, r3\n\tjump.ne\t@.BB0_1\n\tsub.s!\t4, r2, r3\n\tjump.lt\t@.BB0_2\n\tld\tr1, r3\n\tshr.s\t224, r3, r3\n\tsub.s!\t@CPI0_2[0], r3, r5\n\tjump.le\t@.BB0_6\n\tsub.s!\t@CPI0_3[0], r3, r5\n\tjump.eq\t@.BB0_16\n\tsub.s!\t@CPI0_4[0], r3, r4\n\tjump.eq\t@.BB0_52\n\tsub.s!\t@CPI0_5[0], r3, r3\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r2\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tadd\t1, r0, r2\n\tsload\tr2, r3\n\tsub!\tr1, r3, r3\n\tjump.ge\t@.BB0_2\n\tst.1\t0, r2\n\tshl.s\t1, r1, r4\n\tadd\t@CPI0_8[0], r4, r1\n\tsload\tr1, r2\n\tand!\t1, r2, r3\n\tshr.s\t1, r2, r5\n\tand\t127, r5, r6\n\tadd.ne\tr5, r0, r6\n\tsub.s!\t31, r6, r5\n\tadd\t0, r0, r5\n\tadd.gt\t1, r0, r5\n\txor\tr2, r5, r5\n\tadd\t@CPI0_9[0], r4, r4\n\tand!\t1, r5, r5\n\tjump.eq\t@.BB0_60\n.BB0_33:\n\tadd\t@CPI0_16[0], r0, r1\n\tst.1\t0, r1\n\tadd\t34, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_17[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_1:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tadd\t32, r0, r1\n\tst.2\t256, r1\n\tst.2\t288, r0\n\tadd\t@CPI0_1[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_6:\n\tsub.s!\t@CPI0_6[0], r3, r4\n\tjump.eq\t@.BB0_11\n\tsub.s!\t@CPI0_7[0], r3, r3\n\tjump.ne\t@.BB0_2\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r2\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r2\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsstore\tr0, r1\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_16:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t68, r2, r5\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r3\n\tld\tr3, r5\n\tsub.s!\t@CPI0_11[0], r5, r3\n\tjump.gt\t@.BB0_2\n\tadd\t35, r5, r3\n\tsub!\tr3, r2, r3\n\tjump.ge\t@.BB0_2\n\tadd\t4, r5, r6\n\tptr.add\tr1, r6, r3\n\tld\tr3, r3\n\tsub.s!\t@CPI0_13[0], r3, r7\n\tjump.ge\t@.BB0_21\n\tadd\t31, r3, r7\n\tsub.s\t32, r0, r10\n\tand\tr7, r10, r7\n\tadd\t63, r7, r7\n\tand\tr7, r10, r7\n\tsub.s!\t@CPI0_14[0], r7, r8\n\tjump.le\t@.BB0_24\n.BB0_21:\n\tadd\t@CPI0_16[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI0_17[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_52:\n\tcontext.get_context_u128\tr3\n\tsub.s!\t36, r2, r4\n\tjump.lt\t@.BB0_2\n\tsub!\tr3, r0, r3\n\tjump.ne\t@.BB0_2\n\tptr.add.s\t4, r1, r1\n\tld\tr1, r1\n\tsub.s!\t@CPI0_11[0], r1, r3\n\tjump.gt\t@.BB0_2\n\tadd\t4, r1, r1\n\tnear_call\tr0, @abi_decode_string, @DEFAULT_UNWIND\n\tld.1.inc\tr1, r3, r1\n\tadd\tr3, r0, stack-[7]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[8]\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r3\n\tadd\tstack-[8], r0, r1\n\tadd\tr3, r1, r4\n\tadd\t2, r0, r2\n\tst.1\tr4, r2\n\tadd\t32, r3, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tsload\tr1, r1\n\tld.1\t64, r2\n\tst.1\tr2, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t64, r2, r1\n\tor\t@CPI0_12[0], r1, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_11:\n\tcontext.get_context_u128\tr1\n\tsub!\tr1, r0, r1\n\tjump.ne\t@.BB0_2\n\tsload\tr0, r1\n\tst.1\t128, r1\n\tadd\t@CPI0_18[0], r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_60:\n\tsload\tr4, r4\n\tadd\tr4, r0, stack-[8]\n\tst.1\t128, r6\n\tsub!\tr3, r0, r3\n\tjump.eq\t@.BB0_62\n\tadd\tr6, r0, stack-[7]\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_10[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[7], r0, r5\n\tsub!\tr5, r0, r2\n\tjump.ne\t@.BB0_66\n\tadd\t160, r0, r1\n\tjump\t@.BB0_61\n.BB0_24:\n\tadd\t128, r7, r7\n\tst.1\t64, r7\n\tst.1\t128, r3\n\tadd\tr5, r3, r5\n\tadd\t36, r5, r5\n\tsub!\tr5, r2, r2\n\tjump.le\t@.BB0_25\n.BB0_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB0_62:\n\tsub.s\t256, r0, r1\n\tand\tr2, r1, r1\n\tst.1\t160, r1\n\tsub!\tr6, r0, r1\n\tadd\t192, r0, r1\n\tadd.eq\t160, r0, r1\n.BB0_61:\n\tsub.s\t128, r1, r2\n\tadd\t128, r0, r1\n\tnear_call\tr0, @finalize_allocation, @DEFAULT_UNWIND\n\tld.1\t64, r4\n\tadd\tr4, r0, stack-[7]\n\tadd\t32, r4, r1\n\tadd\t64, r0, r2\n\tst.1\tr1, r2\n\tadd\tstack-[8], r0, r1\n\tst.1\tr4, r1\n\tadd\t64, r4, r1\n\tld.1\t128, r3\n\tadd\tr3, r0, stack-[8]\n\tst.1\tr1, r3\n\tadd\t96, r4, r2\n\tadd\t160, r0, r1\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[8], r0, r1\n\tadd\t31, r1, r1\n\tsub.s\t32, r0, r2\n\tand\tr1, r2, r1\n\tadd\t96, r1, r1\n\tadd\t@CPI0_0[0], r0, r2\n\tsub.s!\t@CPI0_0[0], r1, r3\n\tadd.ge\tr2, r0, r1\n\tadd\tstack-[7], r0, r4\n\tsub.s!\t@CPI0_0[0], r4, r3\n\tadd.ge\tr2, r0, r4\n\tshl.s\t64, r4, r2\n\tshl.s\t96, r1, r1\n\tor\tr1, r2, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.BB0_25:\n\tadd\t32, r6, r2\n\tptr.add\tr1, r2, r2\n\tand\t31, r3, r5\n\tshr.s!\t5, r3, r6\n\tjump.eq\t@.BB0_69\n\tadd\tr0, r0, r7\n.BB0_27:\n\tshl.s\t5, r7, r8\n\tptr.add\tr2, r8, r9\n\tld\tr9, r9\n\tadd\t160, r8, r8\n\tst.1\tr8, r9\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB0_27\n.BB0_69:\n\tsub!\tr5, r0, r7\n\tjump.eq\t@.BB0_29\n\tshl.s\t5, r6, r6\n\tptr.add\tr2, r6, r2\n\tshl.s\t3, r5, r5\n\tadd\t160, r6, r6\n\tld.1\tr6, r7\n\tshl\tr7, r5, r7\n\tshr\tr7, r5, r7\n\tld\tr2, r2\n\tsub\t256, r5, r5\n\tshr\tr2, r5, r2\n\tshl\tr2, r5, r2\n\tor\tr2, r7, r2\n\tst.1\tr6, r2\n.BB0_29:\n\tadd\t160, r3, r2\n\tst.1\tr2, r0\n\tptr.add.s\t36, r1, r1\n\tld\tr1, r5\n\tld.1\t64, r1\n\tsub.s!\t@CPI0_15[0], r1, r2\n\tjump.gt\t@.BB0_21\n\tadd\t64, r1, r2\n\tst.1\t64, r2\n\tst.1.inc\tr1, r5, r2\n\tst.1\tr2, r4\n\tadd\t1, r0, r6\n\tsload\tr6, r3\n\tsub.s!\t@CPI0_11[0], r3, r4\n\tjump.gt\t@.BB0_21\n\tadd\t1, r3, r4\n\tsstore\tr6, r4\n\tst.1\t0, r6\n\tld.1\tr1, r1\n\tshl.s\t1, r3, r3\n\tadd\t@CPI0_9[0], r3, r4\n\tsstore\tr4, r1\n\tadd\t@CPI0_8[0], r3, r3\n\tld.1\tr2, r7\n\tld.1.inc\tr7, r4, r8\n\tsub.s!\t@CPI0_11[0], r4, r1\n\tjump.gt\t@.BB0_21\n\tsload\tr3, r1\n\tand!\t1, r1, r2\n\tshr.s\t1, r1, r1\n\tand\t127, r1, r9\n\tadd.ne\tr1, r0, r9\n\tsub.s!\t31, r9, r1\n\tadd\t0, r0, r1\n\tadd.gt\t1, r0, r1\n\tsub!\tr2, r1, r1\n\tjump.ne\t@.BB0_33\n\tadd\tr8, r0, stack-[1]\n\tadd\tr7, r0, stack-[2]\n\tadd\tr4, r0, stack-[8]\n\tadd\tr6, r0, stack-[6]\n\tadd\tr3, r0, stack-[7]\n\tadd\tr10, r0, stack-[4]\n\tadd\tr5, r0, stack-[5]\n\tadd\tr9, r0, stack-[3]\n\tsub.s!\t32, r9, r1\n\tjump.lt\t@.BB0_38\n\tadd\tstack-[7], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_10[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB0_2\n\tadd\tstack-[8], r0, r3\n\tadd\t31, r3, r2\n\tshr.s\t5, r2, r2\n\tsub.s!\t32, r3, r3\n\tadd.lt\tr0, r0, r2\n\tld\tr1, r3\n\tadd\tstack-[3], r0, r1\n\tadd\t31, r1, r1\n\tshr.s\t5, r1, r1\n\tadd\tr3, r1, r1\n\tadd\tr3, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.ge\t@.BB0_38\n.BB0_39:\n\tsstore\tr2, r0\n\tadd\t1, r2, r2\n\tsub!\tr2, r1, r3\n\tjump.lt\t@.BB0_39\n.BB0_38:\n\tadd\tstack-[8], r0, r1\n\tsub.s!\t31, r1, r1\n\tjump.le\t@.BB0_49\n\tadd\tstack-[7], r0, r1\n\tst.1\t0, r1\n\tadd\t@CPI0_0[0], r0, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI0_0[0], r2, r3\n\tadd.ge\tr1, r0, r2\n\tshl.s\t192, r2, r1\n\tor\t@CPI0_10[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tadd\tstack-[4], r0, r2\n\tjump.eq\t@.BB0_2\n\tand!\tstack-[8], r2, r3\n\tld\tr1, r1\n\tjump.ne\t@.BB0_44\n\tadd\t32, r0, r2\n\tjump\t@.BB0_46\n.BB0_66:\n\tld\tr1, r1\n\tadd\tr0, r0, r3\n.BB0_67:\n\tadd\tr3, r0, r2\n\tsload\tr1, r3\n\tadd\t160, r2, r4\n\tst.1\tr4, r3\n\tadd\t1, r1, r1\n\tadd\t32, r2, r3\n\tsub!\tr3, r5, r4\n\tjump.lt\t@.BB0_67\n\tadd\t192, r2, r1\n\tjump\t@.BB0_61\n.BB0_49:\n\tsub!\tstack-[8], r0, r1\n\tadd\tr0, r0, r1\n\tjump.eq\t@.BB0_51\n\tadd\tstack-[1], r0, r1\n\tld.1\tr1, r1\n.BB0_51:\n\tadd\tstack-[8], r0, r4\n\tshl.s\t3, r4, r2\n\tsub.s\t1, r0, r3\n\tshr\tr3, r2, r2\n\txor\tr2, r3, r2\n\tand\tr1, r2, r1\n\tshl.s\t1, r4, stack-[6]\n\tjump\t@.BB0_40\n.BB0_44:\n\tadd\t32, r0, r2\n\tadd\tr0, r0, r4\n\tadd\tstack-[2], r0, r6\n.BB0_45:\n\tadd\tr2, r6, r5\n\tld.1\tr5, r5\n\tsstore\tr1, r5\n\tadd\t32, r2, r2\n\tadd\t1, r1, r1\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB0_45\n.BB0_46:\n\tsub.s!\tstack-[8], r3, r3\n\tjump.ge\t@.BB0_48\n\tadd\tstack-[8], r0, r3\n\tshl.s\t3, r3, r3\n\tand\t248, r3, r3\n\tsub.s\t1, r0, r4\n\tshr\tr4, r3, r3\n\txor\tr3, r4, r3\n\tadd\tstack-[2], r2, r2\n\tld.1\tr2, r2\n\tand\tr2, r3, r2\n\tsstore\tr1, r2\n.BB0_48:\n\tadd\tstack-[8], r0, r1\n\tshl.s\t1, r1, r1\n.BB0_40:\n\tor\tstack-[6], r1, r1\n\tadd\tstack-[7], r0, r2\n\tsstore\tr2, r1\n\tld.1\t128, r3\n\tadd\tr3, r0, stack-[7]\n\tld.1\t64, r2\n\tadd\tr2, r0, stack-[8]\n\tadd\t160, r0, r1\n\tnear_call\tr0, @copy_memory_to_memory_with_cleanup, @DEFAULT_UNWIND\n\tadd\tstack-[7], r0, r3\n\tadd\tstack-[8], r0, r1\n\tadd\tr3, r1, r4\n\tadd\t2, r0, r2\n\tst.1\tr4, r2\n\tadd\t32, r3, r2\n\tnear_call\tr0, @__sha3, @DEFAULT_UNWIND\n\tadd\tstack-[5], r0, r2\n\tsstore\tr1, r2\n\tadd\tr0, r0, r1\n\tret.ok.to_label\tr1, @DEFAULT_FAR_RETURN\n.func_end0:\n\nfinalize_allocation:\n.func_begin1:\n\tadd\t31, r2, r2\n\tsub.s\t32, r0, r3\n\tand\tr2, r3, r2\n\tadd\tr2, r1, r1\n\tsub!\tr1, r2, r2\n\tadd\t0, r0, r2\n\tadd.lt\t1, r0, r2\n\tsub.s!\t@CPI1_0[0], r1, r3\n\tjump.gt\t@.BB1_2\n\tand!\t1, r2, r2\n\tjump.ne\t@.BB1_2\n\tst.1\t64, r1\n\tret\n.BB1_2:\n\tadd\t@CPI1_1[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI1_2[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end1:\n\nabi_decode_string:\n.func_begin2:\n\tadd\tr1, r0, r3\n\tadd\t31, r3, r1\n\tadd\t@CPI2_0[0], r0, r4\n\tsub!\tr1, r2, r5\n\tadd\tr0, r0, r5\n\tadd.lt\tr4, r0, r5\n\tand\t@CPI2_0[0], r2, r6\n\tand\t@CPI2_0[0], r1, r1\n\tsub!\tr1, r6, r7\n\tadd.le\tr0, r0, r4\n\txor\tr1, r6, r1\n\tsub.s!\t@CPI2_0[0], r1, r1\n\tadd.ne\tr5, r0, r4\n\tsub!\tr4, r0, r1\n\tjump.eq\t@.BB2_1\n\tptr.add\tstack[@ptr_calldata], r0, r6\n\tptr.add\tr6, r3, r1\n\tld\tr1, r4\n\tsub.s!\t@CPI2_1[0], r4, r1\n\tjump.ge\t@.BB2_3\n\tadd\t31, r4, r1\n\tsub.s\t32, r0, r5\n\tand\tr1, r5, r1\n\tadd\t63, r1, r1\n\tand\tr1, r5, r5\n\tld.1\t64, r1\n\tadd\tr1, r5, r5\n\tsub!\tr5, r1, r7\n\tadd\t0, r0, r7\n\tadd.lt\t1, r0, r7\n\tsub.s!\t@CPI2_2[0], r5, r8\n\tjump.gt\t@.BB2_3\n\tand!\t1, r7, r7\n\tjump.ne\t@.BB2_3\n\tst.1\t64, r5\n\tst.1.inc\tr1, r4, r5\n\tadd\t32, r3, r3\n\tadd\tr3, r4, r7\n\tsub!\tr7, r2, r2\n\tjump.gt\t@.BB2_1\n\tptr.add\tr6, r3, r3\n\tand\t31, r4, r2\n\tshr.s!\t5, r4, r6\n\tjump.eq\t@.BB2_12\n\tadd\tr0, r0, r7\n.BB2_9:\n\tshl.s\t5, r7, r8\n\tadd\tr5, r8, r9\n\tptr.add\tr3, r8, r8\n\tld\tr8, r8\n\tst.1\tr9, r8\n\tadd\t1, r7, r7\n\tsub!\tr7, r6, r8\n\tjump.lt\t@.BB2_9\n.BB2_12:\n\tsub!\tr2, r0, r7\n\tjump.eq\t@.BB2_11\n\tshl.s\t5, r6, r6\n\tptr.add\tr3, r6, r3\n\tadd\tr5, r6, r6\n\tshl.s\t3, r2, r2\n\tld.1\tr6, r7\n\tshl\tr7, r2, r7\n\tshr\tr7, r2, r7\n\tld\tr3, r3\n\tsub\t256, r2, r2\n\tshr\tr3, r2, r3\n\tshl\tr3, r2, r2\n\tor\tr2, r7, r2\n\tst.1\tr6, r2\n.BB2_11:\n\tadd\tr5, r4, r2\n\tst.1\tr2, r0\n\tret\n.BB2_3:\n\tadd\t@CPI2_3[0], r0, r1\n\tst.1\t0, r1\n\tadd\t65, r0, r1\n\tst.1\t4, r1\n\tadd\t@CPI2_4[0], r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.BB2_1:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end2:\n\ncopy_memory_to_memory_with_cleanup:\n.func_begin3:\n\tsub!\tr3, r0, r4\n\tjump.eq\t@.BB3_3\n\tadd\tr0, r0, r4\n.BB3_2:\n\tadd\tr4, r2, r5\n\tadd\tr4, r1, r6\n\tld.1\tr6, r6\n\tst.1\tr5, r6\n\tadd\t32, r4, r4\n\tsub!\tr4, r3, r5\n\tjump.lt\t@.BB3_2\n.BB3_3:\n\tadd\tr3, r2, r1\n\tst.1\tr1, r0\n\tret\n.func_end3:\n\n__sha3:\n.func_begin4:\n\tadd\t@CPI4_0[0], r0, r3\n\tsub.s!\t@CPI4_0[0], r1, r4\n\tadd.ge\tr3, r0, r1\n\tshl.s\t64, r1, r1\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t96, r2, r2\n\tor\tr2, r1, r1\n\tcontext.gas_left\tr2\n\tsub.s!\t@CPI4_0[0], r2, r4\n\tadd.ge\tr3, r0, r2\n\tshl.s\t192, r2, r2\n\tor\tr2, r1, r1\n\tor\t@CPI4_1[0], r1, r1\n\tadd\t32784, r0, r2\n\tnear_call\tr0, @__staticcall, @DEFAULT_UNWIND\n\tand!\t1, r2, r2\n\tjump.eq\t@.BB4_2\n\tld\tr1, r1\n\tret\n.BB4_2:\n\tadd\tr0, r0, r1\n\tret.revert.to_label\tr1, @DEFAULT_FAR_REVERT\n.func_end4:\n\n__staticcall:\n.func_begin5:\n.tmp0:\n\tfar_call.static\tr1, r2, @.BB5_2\n.tmp1:\n\tadd\t1, r0, r2\n\tret\n.BB5_2:\n.tmp2:\n\tadd\tr0, r0, r2\n\tret\n.func_end5:\n\n\t.data\n\t.p2align\t5, 0x0\nptr_calldata:\n.cell\t0\n\n\t.note.GNU-stack\n\t.rodata\nCPI0_0:\nCPI4_0:\n\t.cell 4294967295\nCPI0_1:\n\t.cell 53919893334301279589334030174039261352344891250716429051063678533632\nCPI0_2:\n\t.cell 1870008128\nCPI0_3:\n\t.cell 1870008129\nCPI0_4:\n\t.cell 2343275989\nCPI0_5:\n\t.cell 2658800557\nCPI0_6:\n\t.cell 778358465\nCPI0_7:\n\t.cell 1616328221\nCPI0_8:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860937\nCPI0_9:\n\t.cell -35707666377435648211887908874984608119992236509074197713628505308453184860938\nCPI0_10:\n\t.cell 904625697166532776746648320380374280103671757735618107014721178055227736064\nCPI0_11:\nCPI1_0:\nCPI2_2:\n\t.cell 18446744073709551615\nCPI0_12:\n\t.cell 2535301200456458802993406410752\nCPI0_13:\nCPI2_1:\n\t.cell 18446744073709551616\nCPI0_14:\n\t.cell 18446744073709551487\nCPI0_15:\n\t.cell 18446744073709551551\nCPI0_16:\nCPI1_1:\nCPI2_3:\n\t.cell 35408467139433450592217433187231851964531694900788300625387963629091585785856\nCPI0_17:\nCPI1_2:\nCPI2_4:\n\t.cell 2852213850513516153367582212096\nCPI0_18:\n\t.cell 2535301202817642044428229017600\nCPI2_0:\n\t.cell -57896044618658097711785492504343953926634992332820282019728792003956564819968\nCPI4_1:\n\t.cell 904625697166532776746648320380374280103671755200316906558262375061821325312\n","bytecode":{"object":""},"methodIdentifiers":{"addPerson(string,uint256)":"6f760f41","nameToFavoriteNumber(string)":"8bab8dd5","people(uint256)":"9e7a13ad","retrieve()":"2e64cec1","store(uint256)":"6057361d"}},"irOptimized":"/// @use-src 0:\"contracts/SimpleStorage.sol\"\nobject \"SimpleStorage_58\" {\n    code {\n        {\n            /// @src 0:79:752  \"contract SimpleStorage {...\"\n            let _1 := memoryguard(0x80)\n            mstore(64, _1)\n            if callvalue() { revert(0, 0) }\n            let _2 := datasize(\"SimpleStorage_58_deployed\")\n            codecopy(_1, dataoffset(\"SimpleStorage_58_deployed\"), _2)\n            return(_1, _2)\n        }\n    }\n    /// @use-src 0:\"contracts/SimpleStorage.sol\"\n    object \"SimpleStorage_58_deployed\" {\n        code {\n            {\n                /// @src 0:79:752  \"contract SimpleStorage {...\"\n                let _1 := memoryguard(0x80)\n                let _2 := 64\n                mstore(_2, _1)\n                let _3 := 4\n                if iszero(lt(calldatasize(), _3))\n                {\n                    let _4 := 0\n                    switch shr(224, calldataload(_4))\n                    case 0x2e64cec1 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _4) { revert(_4, _4) }\n                        mstore(_1, sload(_4))\n                        return(_1, 32)\n                    }\n                    case 0x6057361d {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        sstore(_4, calldataload(_3))\n                        return(_4, _4)\n                    }\n                    case 0x6f760f41 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), _2) { revert(_4, _4) }\n                        let offset := calldataload(_3)\n                        let _5 := 0xffffffffffffffff\n                        if gt(offset, _5) { revert(_4, _4) }\n                        let value0 := abi_decode_string(add(_3, offset), calldatasize())\n                        let value := calldataload(36)\n                        let memPtr := mload(_2)\n                        let newFreePtr := add(memPtr, _2)\n                        if or(gt(newFreePtr, _5), lt(newFreePtr, memPtr))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 36)\n                        }\n                        mstore(_2, newFreePtr)\n                        mstore(memPtr, value)\n                        let _6 := 32\n                        /// @src 0:654:684  \"People(_favoriteNumber, _name)\"\n                        let _7 := add(memPtr, /** @src 0:79:752  \"contract SimpleStorage {...\" */ _6)\n                        mstore(_7, value0)\n                        let _8 := 1\n                        let oldLen := sload(_8)\n                        if iszero(lt(oldLen, 18446744073709551616))\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 36)\n                        }\n                        sstore(_8, add(oldLen, _8))\n                        let slot, offset_1 := storage_array_index_access_struct_People__dyn(oldLen)\n                        if offset_1\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, _4)\n                            revert(_4, 36)\n                        }\n                        sstore(slot, mload(memPtr))\n                        let memberSlot := add(slot, _8)\n                        let _9 := mload(_7)\n                        let newLen := mload(_9)\n                        if gt(newLen, _5)\n                        {\n                            mstore(_4, shl(224, 0x4e487b71))\n                            mstore(_3, 0x41)\n                            revert(_4, 36)\n                        }\n                        let _10 := extract_byte_array_length(sload(memberSlot))\n                        if gt(_10, 31)\n                        {\n                            mstore(_4, memberSlot)\n                            let data := keccak256(_4, _6)\n                            let deleteStart := add(data, shr(5, add(newLen, 31)))\n                            if lt(newLen, _6) { deleteStart := data }\n                            let _11 := add(data, shr(5, add(_10, 31)))\n                            let start := deleteStart\n                            for { } lt(start, _11) { start := add(start, _8) }\n                            { sstore(start, _4) }\n                        }\n                        let srcOffset := _4\n                        srcOffset := _6\n                        switch gt(newLen, 31)\n                        case 1 {\n                            let loopEnd := and(newLen, not(31))\n                            mstore(_4, memberSlot)\n                            let dstPtr := keccak256(_4, _6)\n                            let i := _4\n                            for { } lt(i, loopEnd) { i := add(i, _6) }\n                            {\n                                sstore(dstPtr, mload(add(_9, srcOffset)))\n                                dstPtr := add(dstPtr, _8)\n                                srcOffset := add(srcOffset, _6)\n                            }\n                            if lt(loopEnd, newLen)\n                            {\n                                let lastValue := mload(add(_9, srcOffset))\n                                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n                            }\n                            sstore(memberSlot, add(shl(_8, newLen), _8))\n                        }\n                        default {\n                            let value_1 := _4\n                            if newLen\n                            {\n                                value_1 := mload(add(_9, srcOffset))\n                            }\n                            sstore(memberSlot, or(and(value_1, not(shr(shl(3, newLen), not(0)))), shl(_8, newLen)))\n                        }\n                        let pos := mload(_2)\n                        let length := mload(value0)\n                        copy_memory_to_memory_with_cleanup(add(value0, _6), pos, length)\n                        let end := add(pos, length)\n                        mstore(end, /** @src 0:696:716  \"nameToFavoriteNumber\" */ 0x02)\n                        /// @src 0:79:752  \"contract SimpleStorage {...\"\n                        sstore(keccak256(pos, add(sub(end, pos), _6)), value)\n                        return(_4, _4)\n                    }\n                    case 0x8bab8dd5 {\n                        if callvalue() { revert(_4, _4) }\n                        if slt(add(calldatasize(), not(3)), 32) { revert(_4, _4) }\n                        let offset_2 := calldataload(_3)\n                        if gt(offset_2, 0xffffffffffffffff) { revert(_4, _4) }\n                        let value0_1 := abi_decode_string(add(_3, offset_2), calldatasize())\n                        let pos_1 := mload(_2)\n                        let length_1 := mload(value0_1)\n                        copy_memory_to_memory_with_cleanup(add(value0_1, 32), pos_1, length_1)\n                        let end_1 := add(pos_1, length_1)\n                        mstore(end_1, /** @src 0:292:346  \"mapping(string => uint256) public nameToFavoriteNumber\" */ 2)\n                        /// @src 0:79:752  \"contract SimpleStorage {...\"\n                        let _12 := sload(keccak256(pos_1, add(sub(end_1, pos_1), 32)))\n                        let memPos := mload(_2)\n                        mstore(memPos, _12)\n                        return(memPos, 32)\n                    }\n                    case 0x9e7a13ad {\n                        if callvalue() { revert(_4, _4) }\n                        let _13 := 32\n                        if slt(add(calldatasize(), not(3)), _13) { revert(_4, _4) }\n                        let value_2 := calldataload(_3)\n                        let _14 := 1\n                        /// @src 0:261:283  \"People[] public people\"\n                        if iszero(lt(value_2, /** @src 0:79:752  \"contract SimpleStorage {...\" */ sload(1)))\n                        /// @src 0:261:283  \"People[] public people\"\n                        {\n                            revert(/** @src 0:79:752  \"contract SimpleStorage {...\" */ _4, _4)\n                        }\n                        /// @src 0:261:283  \"People[] public people\"\n                        let slot_1, offset_3 := storage_array_index_access_struct_People__dyn(value_2)\n                        /// @src 0:79:752  \"contract SimpleStorage {...\"\n                        let _15 := sload(/** @src 0:261:283  \"People[] public people\" */ slot_1)\n                        let _16 := add(slot_1, /** @src 0:79:752  \"contract SimpleStorage {...\" */ 1)\n                        let memPtr_1 := mload(_2)\n                        let ret := _4\n                        let slotValue := sload(_16)\n                        let length_2 := extract_byte_array_length(slotValue)\n                        mstore(memPtr_1, length_2)\n                        let updated_pos := add(memPtr_1, _13)\n                        switch and(slotValue, 1)\n                        case 0 {\n                            mstore(updated_pos, and(slotValue, not(255)))\n                            ret := add(add(memPtr_1, shl(5, iszero(iszero(length_2)))), _13)\n                        }\n                        case 1 {\n                            mstore(_4, _16)\n                            let dataPos := keccak256(_4, _13)\n                            let i_1 := _4\n                            for { } lt(i_1, length_2) { i_1 := add(i_1, _13) }\n                            {\n                                mstore(add(add(memPtr_1, i_1), _13), sload(dataPos))\n                                dataPos := add(dataPos, _14)\n                            }\n                            ret := add(add(memPtr_1, i_1), _13)\n                        }\n                        finalize_allocation(memPtr_1, sub(ret, memPtr_1))\n                        let memPos_1 := mload(_2)\n                        mstore(memPos_1, _15)\n                        mstore(add(memPos_1, _13), _2)\n                        let length_3 := mload(memPtr_1)\n                        mstore(add(memPos_1, _2), length_3)\n                        copy_memory_to_memory_with_cleanup(updated_pos, add(memPos_1, 96), length_3)\n                        return(memPos_1, add(sub(add(memPos_1, and(add(length_3, 31), not(31))), memPos_1), 96))\n                    }\n                }\n                revert(0, 0)\n            }\n            function finalize_allocation(memPtr, size)\n            {\n                let newFreePtr := add(memPtr, and(add(size, 31), not(31)))\n                if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(0, 0x24)\n                }\n                mstore(64, newFreePtr)\n            }\n            function abi_decode_string(offset, end) -> array\n            {\n                if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n                let _1 := calldataload(offset)\n                if gt(_1, 0xffffffffffffffff)\n                {\n                    mstore(/** @src -1:-1:-1 */ 0, /** @src 0:79:752  \"contract SimpleStorage {...\" */ shl(224, 0x4e487b71))\n                    mstore(4, 0x41)\n                    revert(/** @src -1:-1:-1 */ 0, /** @src 0:79:752  \"contract SimpleStorage {...\" */ 0x24)\n                }\n                let memPtr := mload(64)\n                finalize_allocation(memPtr, add(and(add(_1, 0x1f), not(31)), 0x20))\n                mstore(memPtr, _1)\n                if gt(add(add(offset, _1), 0x20), end)\n                {\n                    revert(/** @src -1:-1:-1 */ 0, 0)\n                }\n                /// @src 0:79:752  \"contract SimpleStorage {...\"\n                calldatacopy(add(memPtr, 0x20), add(offset, 0x20), _1)\n                mstore(add(add(memPtr, _1), 0x20), /** @src -1:-1:-1 */ 0)\n                /// @src 0:79:752  \"contract SimpleStorage {...\"\n                array := memPtr\n            }\n            function copy_memory_to_memory_with_cleanup(src, dst, length)\n            {\n                let i := 0\n                for { } lt(i, length) { i := add(i, 32) }\n                {\n                    mstore(add(dst, i), mload(add(src, i)))\n                }\n                mstore(add(dst, length), 0)\n            }\n            function storage_array_index_access_struct_People__dyn(index) -> slot, offset\n            {\n                if iszero(lt(index, sload(/** @src 0:642:648  \"people\" */ 0x01)))\n                /// @src 0:79:752  \"contract SimpleStorage {...\"\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x32)\n                    revert(0, 0x24)\n                }\n                mstore(/** @src -1:-1:-1 */ 0, /** @src 0:642:648  \"people\" */ 0x01)\n                /// @src 0:79:752  \"contract SimpleStorage {...\"\n                slot := add(80084422859880547211683076133703299733277748156566366325829078699459944778998, shl(/** @src 0:642:648  \"people\" */ 0x01, /** @src 0:79:752  \"contract SimpleStorage {...\" */ index))\n                offset := /** @src -1:-1:-1 */ 0\n            }\n            /// @src 0:79:752  \"contract SimpleStorage {...\"\n            function extract_byte_array_length(data) -> length\n            {\n                length := shr(1, data)\n                let outOfPlaceEncoding := and(data, 1)\n                if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n                if eq(outOfPlaceEncoding, lt(length, 32))\n                {\n                    mstore(0, shl(224, 0x4e487b71))\n                    mstore(4, 0x22)\n                    revert(0, 0x24)\n                }\n            }\n        }\n        data \".metadata\" hex\"a26469706673582212201ba72d74278689284a5640c51c810c5f4fa38f73517557e7d422b756899cf89b64736f6c63430008180033\"\n    }\n}\n","hash":"010000a1014e524e0e6aadddb38fde3d11ca4ee89d6309b37b47edd229563506","factoryDependencies":{}}}}}}